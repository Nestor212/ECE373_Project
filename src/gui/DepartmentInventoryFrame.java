package gui;

import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import hardware.Item;

/* Class Description
 * An extension of JFrame, this frame generates a window displaying the inventory associated with the 
 * department pertaining to the session/ login account. 
 * 
 * This Frame is generated by the HomeFrame -> 'Manage Inventory' button, available to Inventory Staff accounts. 
 */

public class DepartmentInventoryFrame extends JFrame implements ActionListener 
{
	private static final long serialVersionUID = -2465285598196994748L;
	SupplyManagerGUI session;
	
	Container container = getContentPane();
	JScrollPane scrollPane;
	
   	JLabel titleLabel = new JLabel();
	JLabel itemNumLabel = new JLabel("Item Number");
	JLabel itemNameLabel = new JLabel("Name");
	JLabel QtyLabel = new JLabel("Qty");
	JLabel supplierPriceLabel = new JLabel("Supplier Price");
	JLabel retailPriceLabel = new JLabel("Retail Price");

	ArrayList<JLabel> itemNumbers;
	ArrayList<JLabel> itemNames;
	ArrayList<JLabel> itemQtys;
	ArrayList<JLabel> retailPrices;
	ArrayList<JLabel> supplierPrices;
	
	//File Menu Declarations
	private JMenuBar menuBar;		//the horizontal container
	private JMenu fileMenu;
	private JMenuItem fileAdjQty;

	public DepartmentInventoryFrame(SupplyManagerGUI aSession)
	{      
		session = aSession;
		
//***** File Menu + Drop-down Options ****\\
		menuBar = new JMenuBar();
		fileMenu = new JMenu("File");
		fileAdjQty = new JMenuItem("Adjust Qty");
		fileAdjQty.addActionListener(this);
		fileMenu.add(fileAdjQty);		
	    menuBar.add(fileMenu);
		setJMenuBar(menuBar);
		
		titleLabel = new JLabel("Inventory - " + session.sessionAccount.getDepartment().toString());
		itemNumbers = new ArrayList<JLabel>(100);
		itemNames = new ArrayList<JLabel>(100);
		itemQtys = new ArrayList<JLabel>(100);
		retailPrices = new ArrayList<JLabel>(100);
		supplierPrices = new ArrayList<JLabel>(100);

		populateInventoryArray();
		
        setLayoutManager();
        setLocationAndSize();
        addComponentsToContainer();
    }
	
	
	public void clearArrays()
	{
		itemNumbers.clear();
		itemNames.clear();
		itemQtys.clear();
		retailPrices.clear();
		supplierPrices.clear();
	}
	
	public void populateInventoryArray()
	{
		for(int i = 0; i < session.sessionAccount.getDepartment().getInventory().size(); i++)
		{
			itemNumbers.add(new JLabel(String.valueOf(session.sessionAccount.getDepartment().getInventory().get(i).getItemNum())));
			itemNames.add(new JLabel(session.sessionAccount.getDepartment().getInventory().get(i).getName()));
			itemQtys.add(new JLabel(String.valueOf(session.sessionAccount.getDepartment().getInventory().get(i).getQty())));
			retailPrices.add(new JLabel("$" + session.sessionAccount.getDepartment().getInventory().get(i).getRetailPrice()));
			supplierPrices.add(new JLabel("$" + session.sessionAccount.getDepartment().getInventory().get(i).getSupplierPrice()));
		}
	}
    public void setLayoutManager() 
    {
        container.setLayout(null);
    }
    
    public void setLocationAndSize() 
    {
    	titleLabel.setBounds(50, 20,  1000, 30);
    	titleLabel.setFont(new Font("Lucida", Font.BOLD, 22));
    	
    	itemNumLabel.setBounds(50, 80,  200, 20);
    	itemNumLabel.setFont(new Font("Lucida", Font.BOLD, 18));
    	itemNameLabel.setBounds(250, 80,  200, 20);
    	itemNameLabel.setFont(new Font("Lucida", Font.BOLD, 18));
    	QtyLabel.setBounds(500, 80,  200, 20);
    	QtyLabel.setFont(new Font("Lucida", Font.BOLD, 18));
    	supplierPriceLabel.setBounds(600, 80,  200, 20);
    	supplierPriceLabel.setFont(new Font("Lucida", Font.BOLD, 18));
    	retailPriceLabel.setBounds(800, 80,  200, 20);
    	retailPriceLabel.setFont(new Font("Lucida", Font.BOLD, 18));
    	
		for(int i = 1; i <= session.sessionAccount.getDepartment().getInventory().size(); i++)
		{
			itemNumbers.get(i - 1).setBounds(50, (i * 20) + 100,  600, 20);
			itemNames.get(i - 1).setBounds(250, (i * 20) + 100,  600, 20);
			itemQtys.get(i - 1).setBounds(500, (i * 20) + 100,  600, 20);
			supplierPrices.get(i - 1).setBounds(600, (i * 20) + 100,  600, 20);		
			retailPrices.get(i - 1).setBounds(800, (i * 20) + 100,  600, 20);
		}
    }
    
    public void addComponentsToContainer() 
    {
    	container.removeAll();
		container.add(titleLabel);
        container.add(itemNumLabel);
        container.add(itemNameLabel);
        container.add(QtyLabel);
        container.add(supplierPriceLabel);
        container.add(retailPriceLabel);
        
		for(int i = 0; i < session.sessionAccount.getDepartment().getInventory().size(); i++)
		{
	        container.add(itemNumbers.get(i));
	        container.add(itemNames.get(i));
	        container.add(itemQtys.get(i));
	        container.add(retailPrices.get(i));
	        container.add(supplierPrices.get(i));	
		}
		super.update(getGraphics());
    }

	@Override
	public void actionPerformed(ActionEvent e) 
	{
		if(e.getSource().equals(fileAdjQty))
		{
			handleAdjQty();	
		}		
	}
	
	public void handleAdjQty()
	{
		JTextField itemNumber = new JTextField();
		JTextField adjustment = new JTextField();
		
		Object[] fields = 
		{
			"Enter Item Number:", itemNumber,
			"Adjustemnt Qty:", adjustment,
		};
	
		int x = JOptionPane.showConfirmDialog(null, fields, "Adjust Inventory" , JOptionPane.OK_CANCEL_OPTION);
		if(x == JOptionPane.OK_OPTION) 
		{
			if(itemNumber.getText().isBlank())
			{
                JOptionPane.showMessageDialog(null, "Item Number field is empty.", "Error", JOptionPane.ERROR_MESSAGE);
			}
			else if(adjustment.getText().isBlank())
			{
                JOptionPane.showMessageDialog(null, "Adjustment Qty field is empty.", "Error", JOptionPane.ERROR_MESSAGE);
			}
			else
			{
				Item i1 = null;
				for(int i = 0; i < session.sessionAccount.getDepartment().getInventory().size(); i++)
				{
					if(session.sessionAccount.getDepartment().getInventory().get(i).getItemNum().equals(Integer.parseInt(itemNumber.getText())))
					{
						i1 = session.sessionAccount.getDepartment().getInventory().get(i);
					}
				}
				if(i1 != null)
				{
					i1.addQty(Integer.parseInt(adjustment.getText()));
					
	                JOptionPane.showMessageDialog(null, "Item #: " + i1.getItemNum() + " has been updated", "Success", JOptionPane.INFORMATION_MESSAGE);
	                clearArrays();
	                populateInventoryArray();
	                setLocationAndSize();
	                addComponentsToContainer();
				}
				else
				{
	                JOptionPane.showMessageDialog(null, "Error finding item", "Error", JOptionPane.ERROR_MESSAGE);
				}				               
			}
		}
	}
}
